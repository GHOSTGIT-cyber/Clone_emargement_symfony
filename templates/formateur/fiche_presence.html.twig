{% extends 'base.html.twig' %}


{% block title %}Signature des apprenants{% endblock %}

{% block stylesheets %}
    {{ parent() }}
    <link rel="stylesheet" href="{{ asset('css/signature.css') }}">
    
{% endblock %}

{% block body %}

    <!-- Popup de signature avec Signature Pad -->
<div id="signature-popup" class="signature-popup {% if not formateur_a_deja_signe %}active{% endif %}">
    <div class="signature-modal">
        <h2>Signature du formateur</h2>
        <p class="signature-instructions">
            Veuillez signer ci-dessous pour acc√©der √† la fiche de pr√©sence
        </p>
        
        <!-- Canvas pour Signature Pad -->
        <div class="signature-container">
            <canvas id="signature-canvas" class="signature-canvas" width="500" height="200"></canvas>
        </div>
        
        <div class="signature-buttons">
            <button type="button" id="btn-retour" class="btn-signature btn-retour">
                ‚Üê Retour
            </button>
            <button type="button" id="btn-effacer" class="btn-signature btn-effacer">
                Effacer
            </button>
            <button type="button" id="btn-valider" class="btn-signature btn-valider">
                Valider la signature
            </button>
            <button type="button" id="btn-bypass" class="btn-signature btn-bypass">
                üîß Mode Test - Bypasser
            </button>
        </div>
    </div>
</div>


    <!-- Contenu principal de la fiche de pr√©sence -->
    <div class="page-fiche-presence">
    <div class="main-container">
    
        <!-- Votre contenu existant de fiche de pr√©sence -->
        <div class="sidebar">
            <div class="profile-icon">
                <div class="circle">
                    <span>
                        {% if formateur.firstname is defined %}{{ formateur.firstname|first|upper }}{% endif %}
                        {% if formateur.lastname is defined %}{{ formateur.lastname|first|upper }}{% endif %}
                    </span>
                </div>
            </div>
            <div class="logout-container">
                <form action="{{ path('app_logout') }}" method="post">
                    <button type="submit" class="logout-btn">D√©connexion</button>
                </form>
            </div>
            <a href="{{ path('app_logout') }}">D√©connexion</a>
    
            <div class="menu-items">
                <a href="#" class="menu-item">
                    <i class="menu-icon email-icon"></i>
                    <span>Email</span>
                </a>
                <a href="#" class="menu-item">
                    <i class="menu-icon qr-icon"></i>
                    <span>QR code</span>
                </a>
            </div>
        </div>

        <div class="content">
            <div class="header">
                <div class="course-info">
                    <h1>{{ session.titre }}</h1>
                    <h2>{{ session.date }} - {{ session.horaire }}</h2>
                </div>
                
                <div class="logo">
                    <img src="{{ asset('images/gefor.jpg') }}" alt="Groupe GEFOR">
                </div>
                
                <div class="signature-count">
                    <h3>Nombre de signature</h3>
                    <p>{{ session.signatures_obtenues }}/{{ session.signatures_total }}</p>
                </div>
            </div>

            <div class="main-content">
                <h2>S√©lectionnez les apprenants pr√©sents et envoyez un email de signature</h2>
                
                <form action="{{ path('formateur_envoyer_email_signature', {'id': app.request.get('id')}) }}" method="post">
                    <!-- Votre contenu existant du tableau -->
                    <div class="attendees-table">
                        <table>
                            <thead>
                                <tr>
                                    <th class="checkbox-column">
                                        <input type="checkbox" id="select-all">
                                    </th>
                                    <th>Nom</th>
                                    <th>Email</th>
                                    <th>√âtat</th>
                                    <th>Actions</th>
                                </tr>
                            </thead>
                            <tbody>
                                {% for signature in signatures %}
                                    <tr>
                                        <td>
                                            <input type="checkbox" name="apprenants[]" value="{{ signature.user.id }}" class="student-checkbox"
                                                {% if signature.statut == 'pr√©sent' and signature.heureSignature %}checked{% endif %}>
                                        </td>
                                        <td>{{ signature.user.lastname }} {{ signature.user.firstname }}</td>
                                        <td>{{ signature.user.email }}</td>
                                        <td class="status">
                                            {% if signature.getStatut() == 'pr√©sent' and signature.heureSignature is not null and signature.signatureData is not null %}
                                                <span class="present">Pr√©sent</span>
                                            {% elseif signature.getStatut() == 'absent' and signature.isJustifie() %}
                                                <span class="justified">Absence justifi√©e</span>
                                            {% elseif signature.getStatut() == 'absent' %}
                                                <span class="absent">Absent</span>
                                            {% else %}
                                                <span class="undefined">Non d√©fini</span>
                                            {% endif %}
                                        </td>
                                        <td class="actions">
                                            <button type="button" class="action-btn">
                                                <i class="more-icon"></i>
                                            </button>
                                            <div class="dropdown-menu">
                                                <ul>
                                                    <!-- Faire signer manuellement -->
                                                    <li>
                                                        <button type="button"
                                                                class="dropdown-action sign-manual"
                                                                data-signature-id="{{ signature.getId() }}"
                                                                data-session-id="{{ session.id }}">
                                                            <i class="icon sign-icon"></i> Faire signer manuellement
                                                        </button>
                                                    </li>
                                                    <!-- Effacer la signature -->
                                                    <li>
                                                        <form method="post"
                                                            action="{{ path('signature_session_delete', {id: signature.getId()}) }}"
                                                            style="display:inline;" onsubmit="return confirm('Effacer la signature ?');">
                                                            <input type="hidden" name="_token" value="{{ csrf_token('delete_signature_' ~ signature.getId()) }}">
                                                            <input type="hidden" name="session_id" value="{{ session.id }}">
                                                            <button type="submit" class="dropdown-action delete-signature" style="background:none;border:none;padding:0;color:#c00;cursor:pointer;">
                                                                Effacer la signature
                                                            </button>
                                                        </form>
                                                    </li>
                                                    <!-- Absence justifi√©e -->
                                                    <li>
                                                        <form method="post"
                                                            action="{{ path('signature_session_justified', {id: signature.getId()}) }}"
                                                            style="display:inline;" onsubmit="return confirm('Marquer comme absence justifi√©e ?');">
                                                            <input type="hidden" name="_token" value="{{ csrf_token('justified_signature_' ~ signature.getId()) }}">
                                                            <input type="hidden" name="session_id" value="{{ session.id }}">
                                                            <button type="submit" class="dropdown-action mark-justified" style="background:none;border:none;padding:0;color:#FFA500;cursor:pointer;">
                                                                <i class="icon absence-icon"></i> Absence justifi√©e
                                                            </button>
                                                        </form>
                                                    </li>
                                                    <!-- Retard (ouvre un popup JS) -->
                                                    <li>
                                                        <button type="button"
                                                                class="dropdown-action mark-late"
                                                                data-signature-id="{{ signature.getId() }}"
                                                                data-session-id="{{ session.id }}">
                                                            <i class="icon late-icon"></i> Retard
                                                        </button>
                                                    </li>
                                                    <!-- Ajouter un commentaire (ouvre un popup JS) -->
                                                    <li>
                                                        <button type="button"
                                                                class="dropdown-action add-comment"
                                                                data-signature-id="{{ signature.getId() }}"
                                                                data-session-id="{{ session.id }}">
                                                            <i class="icon comment-icon"></i> √âcrire un commentaire
                                                        </button>
                                                    </li>
                                                </ul>
                                            </div>
                                        </td>
                                    </tr>
                                {% else %}
                                    <tr>
                                        <td colspan="5" class="no-data">Aucun apprenant inscrit √† cette session</td>
                                    </tr>
                                {% endfor %}
                            </tbody>

                        </table>
                    </div>
                    
                    <div class="action-button">
                        <button type="submit" class="send-email-btn">Envoyez un email de signature aux apprenants</button>
                    </div>
                </form>
            </div>
        </div>
    </div>
    </div>
{% endblock %}

{% block javascripts %}
    {{ parent() }}
    <!-- On inclut la librairie SignaturePad via CDN, ce qui permet de g√©rer le canvas de signature simplement -->
    <script src="https://cdn.jsdelivr.net/npm/signature_pad@4.0.0/dist/signature_pad.umd.min.js"></script>
    <script>
    // On attend que le DOM soit pr√™t pour √©viter les erreurs de s√©lection d'√©l√©ments
                    document.addEventListener('DOMContentLoaded', function() {
                        // 1. --------- INITIALISATION DE SIGNATUREPAD ----------
                        // V√©rification que la librairie SignaturePad est bien charg√©e
                        if (typeof SignaturePad === 'undefined') {
                            console.error('[Signature] SignaturePad non trouv√©. V√©rifiez que la biblioth√®que est charg√©e.');
                            return;
                        }

                        // R√©cup√©ration de tous les √©l√©ments utiles du DOM pour manipuler le pop-up et les boutons
                        const canvas     = document.getElementById('signature-canvas');      // Zone de dessin
                        const popup      = document.getElementById('signature-popup');       // Pop-up global
                        const btnEffacer = document.getElementById('btn-effacer');           // Bouton Effacer
                        const btnValider = document.getElementById('btn-valider');           // Bouton Valider
                        const btnRetour  = document.getElementById('btn-retour');            // Bouton Retour
                        const btnBypass  = document.getElementById('btn-bypass');            // Bouton Bypass (mode test)

                        // Si le canvas n'est pas trouv√©, on arr√™te tout pour √©viter des erreurs plus loin
                        if (!canvas) {
                            console.error('[Signature] Canvas de signature non trouv√©');
                            return;
                        }

                        // Cr√©ation de l'objet SignaturePad, qui permet de dessiner dans le canvas
                        const signaturePad = new SignaturePad(canvas, {
                            backgroundColor: 'rgba(255,255,255,1)', // Fond blanc pour √©viter l'effet transparent sur l'export
                            penColor: 'rgb(0,0,0)',                 // Stylo noir
                            minWidth: 2,                            // Largeur minimum du trait
                            maxWidth: 4,                            // Largeur maximum du trait
                            throttle: 16,                           // Pour fluidifier le dessin
                            minDistance: 5,                         // R√©duit le nombre de points stock√©s pour am√©liorer les perfs
                        });

                        // --------- AJUSTEMENT AUTOMATIQUE DU CANVAS ----------
                        // Fonction pour adapter la taille du canvas en fonction de la taille de l'√©cran et du ratio de pixel (pour les √©crans Retina)
                        function resizeCanvas() {
                            const ratio = Math.max(window.devicePixelRatio || 1, 1);
                            canvas.width = canvas.offsetWidth * ratio;
                            canvas.height = canvas.offsetHeight * ratio;
                            canvas.getContext('2d').scale(ratio, ratio);
                            signaturePad.clear(); // On efface la signature apr√®s chaque resize pour √©viter des d√©calages d'affichage
                        }
                        // Ex√©cution au chargement et lors des redimensionnements de fen√™tre
                        resizeCanvas();
                        window.addEventListener('resize', resizeCanvas);

                        // 2. --------- GESTION DES BOUTONS DU POP-UP ----------

                        // --- Bouton "Effacer" : vide le canvas sans fermer le pop-up
                        if (btnEffacer) {
                            btnEffacer.addEventListener('click', function() {
                                signaturePad.clear();
                                console.log('[Signature] La signature a √©t√© effac√©e');
                            });
                        }

                        // --- Bouton "Retour" : demande une confirmation, puis redirige vers la page planning si oui
                        if (btnRetour) {
                            btnRetour.addEventListener('click', function() {
                                if (confirm('√ätes-vous s√ªr de vouloir fermer sans signer ?')) {
                                    window.location.href = '{{ path('formateur_dashboard') }}';
                                }
                            });
                        }

                        // --- Bouton "Valider la signature" : envoie la signature au backend en AJAX (fetch)
                        if (btnValider) {
                            btnValider.addEventListener('click', function() {
                                // V√©rifie si la signature est vide (pas de dessin)
                                if (signaturePad.isEmpty()) {
                                    alert('Veuillez signer avant de valider.');
                                    return;
                                }

                                // R√©cup√®re l'image sign√©e sous forme de cha√Æne base64 (format PNG)
                                const signatureData = signaturePad.toDataURL('image/png');
                                // Pour les d√©mos, on affiche le d√©but de la cha√Æne base64 dans la console
                                console.log('[Signature] Signature captur√©e (d√©but base64) :', signatureData.slice(0, 50) + '...');

                                // Emp√™che l'utilisateur de cliquer plusieurs fois pendant l'envoi
                                btnValider.disabled = true;
                                btnValider.textContent = 'Sauvegarde...';

                                // Requ√™te POST AJAX vers le serveur Symfony (route g√©r√©e par FormateurFichePresenceController)
                                fetch('{{ path('formateur_sauvegarder_signature', {'id': app.request.get('id')}) }}', {
                                    method: 'POST',
                                    headers: { 'Content-Type': 'application/x-www-form-urlencoded' },
                                    body: 'signature_data=' + encodeURIComponent(signatureData)
                                })
                                .then(response => response.json())
                                .then(data => {
                                    // Si le backend renvoie {success:true}, on ferme le pop-up et on recharge la page
                                    if (data.success) {
                                        popup.classList.remove('active');
                                        window.location.reload();
                                    } else {
                                        // Sinon on affiche un message d'erreur
                                        alert('Erreur: ' + data.message);
                                        btnValider.disabled = false;
                                        btnValider.textContent = 'Valider la signature';
                                    }
                                })
                                .catch(error => {
                                    // Gestion d'erreur r√©seau ou backend
                                    console.error('[Signature] Erreur lors de la sauvegarde', error);
                                    alert('Erreur lors de la sauvegarde.');
                                    btnValider.disabled = false;
                                    btnValider.textContent = 'Valider la signature';
                                });
                            });
                        }

                        // --- Bouton "Bypass" : mode test pour passer la signature (√† d√©sactiver en prod)
                        if (btnBypass) {
                            btnBypass.addEventListener('click', function() {
                                if (confirm('Mode TEST : Bypasser la signature ?')) {
                                    btnBypass.disabled = true;
                                    btnBypass.textContent = 'Bypass...';
                                    fetch('{{ path('formateur_bypass_signature', {'id': app.request.get('id')}) }}', {
                                        method: 'POST',
                                        headers: { 'Content-Type': 'application/json' }
                                    })
                                    .then(response => response.json())
                                    .then(data => {
                                        if (data.success) {
                                            popup.classList.remove('active');
                                            window.location.reload();
                                        } else {
                                            alert('Erreur bypass: ' + data.message);
                                            btnBypass.disabled = false;
                                            btnBypass.textContent = 'üîß Mode Test - Bypasser';
                                        }
                                    })
                                    .catch(error => {
                                        btnBypass.disabled = false;
                                        btnBypass.textContent = 'üîß Mode Test - Bypasser';
                                    });
                                }
                            });
                        }

                        // 3. --------- FONCTIONS SUPPL√âMENTAIRES POUR LA PAGE (dropdowns, checkboxes, etc.) ----------

                        // --- Gestion du menu d√©roulant sur chaque apprenant (dropdown)
                        const actionButtons = document.querySelectorAll('.action-btn');
                        // Ajout d'un style rapide pour √©viter les conflits de z-index
                        const style = document.createElement('style');
                        style.textContent = `
                            .dropdown-menu { position: absolute; z-index: 1050; }
                            .actions { position: relative; }
                            .dropdown-menu.active { display: block; }
                        `;
                        document.head.appendChild(style);

                        // Pour chaque bouton action, on g√®re l'ouverture/fermeture du menu d√©roulant
                        actionButtons.forEach(button => {
                            button.addEventListener('click', function(e) {
                                e.stopPropagation(); // Emp√™che la fermeture directe
                                // Ferme tous les autres menus
                                document.querySelectorAll('.dropdown-menu.active').forEach(menu => {
                                    menu.classList.remove('active');
                                });
                                // Ouvre/ferme le menu associ√© au bouton cliqu√©
                                const dropdownMenu = this.parentElement.querySelector('.dropdown-menu');
                                if (dropdownMenu) {
                                    dropdownMenu.classList.toggle('active');
                                }
                            });
                        });

                        // Ferme tous les menus d√©roulants si on clique ailleurs sur la page
                        document.addEventListener('click', function() {
                            document.querySelectorAll('.dropdown-menu.active').forEach(menu => {
                                menu.classList.remove('active');
                            });
                        });

                        // --- Gestion de la case √† cocher "Tout s√©lectionner"
                        const selectAllCheckbox = document.getElementById('select-all');
                        const studentCheckboxes = document.querySelectorAll('.student-checkbox');
                        // Coche/d√©coche tous les apprenants si "Tout s√©lectionner" est coch√©/d√©coch√©
                        if (selectAllCheckbox) {
                            selectAllCheckbox.addEventListener('change', function() {
                                studentCheckboxes.forEach(checkbox => {
                                    checkbox.checked = selectAllCheckbox.checked;
                                });
                            });
                        }

                        // ---------- 4. SIGNATURE MANUELLE POUR APPRENANT ----------
                        // Variable pour stocker le contexte de signature (formateur ou apprenant)
                        let signatureContext = 'formateur';
                        let currentSignatureId = null;

                        // Cible tous les boutons "Faire signer manuellement"
                        document.querySelectorAll('.sign-manual').forEach(btn => {
                            btn.addEventListener('click', function() {
                                // On r√©cup√®re l'ID de la signature √† modifier (SignatureSession)
                                const signatureId = btn.getAttribute('data-signature-id');
                                
                                // On change le contexte pour la signature d'apprenant
                                signatureContext = 'apprenant';
                                currentSignatureId = signatureId;
                                
                                // Vide le canvas et affiche le pop-up
                                signaturePad.clear();
                                popup.classList.add('active');
                                
                                // Change le titre du pop-up pour indiquer qu'on signe pour un apprenant
                                const popupTitle = popup.querySelector('h2');
                                if (popupTitle) {
                                    popupTitle.textContent = 'Signature manuelle de l\'apprenant';
                                }
                            });
                        });

                        // Modification du bouton valider pour g√©rer les deux contextes
                        if (btnValider) {
                            // On stocke la fonction originale
                            const originalValidateHandler = btnValider.onclick;
                            
                            btnValider.onclick = function() {
                                if (signaturePad.isEmpty()) {
                                    alert('Veuillez signer avant de valider.');
                                    return;
                                }

                                const signatureData = signaturePad.toDataURL('image/png');
                                btnValider.disabled = true;
                                btnValider.textContent = 'Sauvegarde...';

                                // Choisit la route selon le contexte
                                let fetchUrl;
                                if (signatureContext === 'apprenant' && currentSignatureId) {
                                    // Route pour signature manuelle d'apprenant
                                    fetchUrl = '{{ path('apprenant_signature_manual_sign', {'id': 'SIGNATURE_ID'}) }}'.replace('SIGNATURE_ID', currentSignatureId);
                                } else {
                                    // Route pour signature du formateur
                                    fetchUrl = '{{ path('formateur_sauvegarder_signature', {'id': app.request.get('id')}) }}';
                                }

                                fetch(fetchUrl, {
                                    method: 'POST',
                                    headers: { 'Content-Type': 'application/x-www-form-urlencoded' },
                                    body: 'signature_data=' + encodeURIComponent(signatureData)
                                })
                                .then(response => response.json())
                                .then(data => {
                                    if (data.success) {
                                        popup.classList.remove('active');
                                        // Remet le contexte par d√©faut
                                        signatureContext = 'formateur';
                                        currentSignatureId = null;
                                        // Remet le titre original
                                        const popupTitle = popup.querySelector('h2');
                                        if (popupTitle) {
                                            popupTitle.textContent = 'Signature du formateur';
                                        }
                                        window.location.reload();
                                    } else {
                                        alert('Erreur: ' + data.message);
                                        btnValider.disabled = false;
                                        btnValider.textContent = 'Valider la signature';
                                    }
                                })
                                .catch(error => {
                                    console.error('[Signature] Erreur lors de la sauvegarde', error);
                                    alert('Erreur lors de la sauvegarde.');
                                    btnValider.disabled = false;
                                    btnValider.textContent = 'Valider la signature';
                                });
                            };
                        }

                        // ---------- 5. POPUP RETARD ----------
                        document.querySelectorAll('.mark-late').forEach(btn => {
                            btn.addEventListener('click', function() {
                                const signatureId = btn.getAttribute('data-signature-id');
                                const sessionId = btn.getAttribute('data-session-id');
                                const motif = prompt("Motif de retard :"); // Popup simple pour le motif
                                if (motif && motif.trim() !== '') {
                                    // Route corrig√©e selon le contr√¥leur
                                    const fetchUrl = '{{ path('signature_session_late', {'id': 'SIGNATURE_ID'}) }}'.replace('SIGNATURE_ID', signatureId);
                                    
                                    fetch(fetchUrl, {
                                        method: 'POST',
                                        headers: { 
                                            'Content-Type': 'application/x-www-form-urlencoded',
                                            'X-Requested-With': 'XMLHttpRequest'
                                        },
                                        body: 'motif_retard=' + encodeURIComponent(motif) + '&session_id=' + encodeURIComponent(sessionId)
                                    })
                                    .then(response => {
                                        if (response.ok) {
                                            window.location.reload();
                                        } else {
                                            console.error('Erreur lors de l\'enregistrement du retard');
                                            alert('Erreur lors de l\'enregistrement du retard');
                                        }
                                    })
                                    .catch(error => {
                                        console.error('Erreur r√©seau:', error);
                                        alert('Erreur r√©seau lors de l\'enregistrement du retard');
                                    });
                                }
                            });
                        });

                        // ---------- 6. POPUP COMMENTAIRE ----------
                        document.querySelectorAll('.add-comment').forEach(btn => {
                            btn.addEventListener('click', function() {
                                const signatureId = btn.getAttribute('data-signature-id');
                                const sessionId = btn.getAttribute('data-session-id');
                                const commentaire = prompt("Saisissez un commentaire :");
                                if (commentaire && commentaire.trim() !== '') {
                                    // Route corrig√©e selon le contr√¥leur
                                    const fetchUrl = '{{ path('signature_session_comment', {'id': 'SIGNATURE_ID'}) }}'.replace('SIGNATURE_ID', signatureId);
                                    
                                    fetch(fetchUrl, {
                                        method: 'POST',
                                        headers: { 
                                            'Content-Type': 'application/x-www-form-urlencoded',
                                            'X-Requested-With': 'XMLHttpRequest'
                                        },
                                        body: 'commentaire=' + encodeURIComponent(commentaire) + '&session_id=' + encodeURIComponent(sessionId)
                                    })
                                    .then(response => {
                                        if (response.ok) {
                                            window.location.reload();
                                        } else {
                                            console.error('Erreur lors de l\'ajout du commentaire');
                                            alert('Erreur lors de l\'ajout du commentaire');
                                        }
                                    })
                                    .catch(error => {
                                        console.error('Erreur r√©seau:', error);
                                        alert('Erreur r√©seau lors de l\'ajout du commentaire');
                                    });
                                }
                            });
                        });

                        // ---------- 7. GESTION FERMETURE POP-UP ----------
                        // Quand on ferme le pop-up, on remet le contexte par d√©faut
                        if (btnRetour) {
                            btnRetour.addEventListener('click', function() {
                                signatureContext = 'formateur';
                                currentSignatureId = null;
                                const popupTitle = popup.querySelector('h2');
                                if (popupTitle) {
                                    popupTitle.textContent = 'Signature du formateur';
                                }
                            });
                        }
                    });



    </script>
{% endblock %}
