security:
    password_hashers:
        App\Entity\User:
            algorithm: auto
    providers:
        app_user_provider:
            entity:
                class: App\Entity\User
                property: username 
    firewalls:
        dev:
            pattern: ^/(_(profiler|wdt)|css|images|js)/
            security: false

        login:  
            pattern: ^/api/login
            stateless: true
            json_login:
                check_path: /api/login
                username_path: username
                password_path: password
                success_handler: lexik_jwt_authentication.handler.authentication_success
                failure_handler: lexik_jwt_authentication.handler.authentication_failure
    

        api:
            pattern: ^/api
            stateless: true
            provider: app_user_provider
            jwt: ~           
        
        main:
            lazy: true
            provider: app_user_provider
            custom_authenticator: App\Security\UserAuthenticator
            logout:
                path: app_logout
                # where to redirect after logout
                # target: app_any_route

        

            remember_me:
                secret: '%kernel.secret%'
                lifetime: 604800
                path: /
                always_remember_me: false

            #custom_authenticator: App\Security\UserAuthenticator

            #logout:
                #path: app_logout

            # activate different ways to authenticate
            # https://symfony.com/doc/current/security.html#the-firewall

            # https://symfony.com/doc/current/security/impersonating_user.html
            # switch_user: true

    # Easy way to control access for large sections of your site
    # Note: Only the *first* access control that matches will be used
    
    access_control:
    #  ROUTES PUBLIQUES (PAS BESOIN D'ÊTRE CONNECTÉ)
    - { path: ^/api/login, roles: PUBLIC_ACCESS }           # Auth API JWT
    - { path: ^/login, roles: PUBLIC_ACCESS }               # Login web
    - { path: ^/forgot-password, roles: PUBLIC_ACCESS }     # Réinitialisation
    - { path: ^/reset-password, roles: PUBLIC_ACCESS }      # Réinitialisation
    - { path: ^/legal, roles: PUBLIC_ACCESS }               # Mention légal
    - { path: ^/politique-confidentialite, roles: PUBLIC_ACCESS }

    #  ROUTES API (token JWT requis)
    - { path: ^/api, roles: IS_AUTHENTICATED_FULLY }        # Toutes les autres routes API sécurisées

    #  ESPACES PRIVÉS WEB CLASSIQUE
    - { path: ^/admin, roles: ROLE_ADMIN }                  # Admin
    - { path: ^/formateur, roles: ROLE_FORMATEUR }          # Formateur
    - { path: ^/apprenant, roles: ROLE_APPRENANT }          # Apprenant

    #  TOUT LE RESTE DU SITE (besoin d'être connecté)
    - { path: ^/, roles: IS_AUTHENTICATED_FULLY }           # Reste du site (ex : /profil, /accueil)
        

when@test:
    security:
        password_hashers:
            # By default, password hashers are resource intensive and take time. This is
            # important to generate secure password hashes. In tests however, secure hashes
            # are not important, waste resources and increase test times. The following
            # reduces the work factor to the lowest possible values.
            Symfony\Component\Security\Core\User\PasswordAuthenticatedUserInterface:
                algorithm: auto
                cost: 4 # Lowest possible value for bcrypt
                time_cost: 3 # Lowest possible value for argon
                memory_cost: 10 # Lowest possible value for argon
